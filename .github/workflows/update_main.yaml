---
name: update main data

on:
  workflow_dispatch:

jobs:
  discover-providers:
    runs-on: ubuntu-latest
    outputs:
      providers: ${{ steps.find-providers.outputs.providers }}
    steps:
      - uses: actions/checkout@v4
      - name: Find provider scripts
        id: find-providers
        run: |
          providers=$(for i in provider_data/*.py; do \
            basename "$i" .py; done | grep -v utils | \
            jq -R -s -c 'split("\n")[:-1]')
          echo "providers=$providers" >> $GITHUB_OUTPUT
          echo "Found providers: $providers"

  update-providers:
    needs: discover-providers
    runs-on: ubuntu-latest
    strategy:
      matrix:
        provider: ${{ fromJson(needs.discover-providers.outputs.providers) }}
      fail-fast: false

    name: "Update ${{ matrix.provider }}"

    steps:
      - uses: actions/checkout@v4

      - name: "prep env"
        env:
          DOTENV: ${{ secrets.DOTENV }}
        run: |
          echo -n $DOTENV | base64 -d > .env

      - name: "Install uv"
        uses: astral-sh/setup-uv@v6

      - name: "Install the project"
        run: uv sync --all-extras --dev

      - name: "Install playwright"
        run: |
          mkdir -p output
          uv run playwright install

      - name: "Update ${{ matrix.provider }}"
        run: |
          uv run provider_data/${{ matrix.provider }}.py --refresh --prod

  generate-sitemap:
    needs: update-providers
    runs-on: ubuntu-latest
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: "prep env"
        env:
          DOTENV: ${{ secrets.DOTENV }}
        run: |
          echo -n $DOTENV | base64 -d > .env

      - name: "Install uv"
        uses: astral-sh/setup-uv@v6

      - name: "Install the project"
        run: uv sync --all-extras --dev

      - name: "Generate sitemap"
        run: |
          uv run provider_data/utils/generate_sitemap.py --prod

  notify-on-failure:
    needs: [discover-providers, update-providers, generate-sitemap]
    runs-on: ubuntu-latest
    if: >-
      always() && (
        needs.discover-providers.result == 'failure' ||
        needs.update-providers.result == 'failure' ||
        needs.generate-sitemap.result == 'failure'
      )

    steps:
      - name: "Notify in Chat on Failure"
        env:
          WEBHOOK_URL: ${{ secrets.G_WEBHOOK }}
        run: |
          curl -s -H "content-type: application/json" \
            -d '{
              "text": "ðŸš¨ Provider Data Update Failed!\n\n
              Workflow: ${{ github.workflow }}\n
              Repository: ${{ github.repository }}\n
              Branch: ${{ github.ref_name }}\n
              Commit: ${{ github.sha }}\n
              Triggered by: ${{ github.actor }}\n\n
              View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }' \
            "${WEBHOOK_URL}" >/dev/null
